#!/usr/bin/env python
"""Generate HTML for the landing page based on a spreadsheet of book titles and age classifications."""

import os
import sys
import codecs
import csv
import datetime
import shutil
import subprocess
import urllib2
import json
import shutil
import zipfile
import glob
import re
import base64
import random

from PIL import Image

# I am having SSL Cert problems
import ssl
ssl._create_default_https_context = ssl._create_unverified_context

# Had trouble with one of the descriptions decoding correctly
reload(sys)
sys.setdefaultencoding("utf-8")

# Header Title Mappings
SPREADSHEET_TITLE_HEADER    = "Title"
SPREADSHEET_AUTHOR_HEADER   = "Author"
OKAY_FOR_12_AND_UNDER       = "OK for 12yo?"
DESCRIPTION_HEADER          = "Description"
COVER_URL_HEADER            = "Cover URL"
COVER_FILENAME_HEADER       = "Cover filename"
EPUB_URL_HEADER             = "EPUB URL"
EPUB_FILENAME_HEADER        = "EPUB filename"
MTA_CATEGORY_1              = "MTA Category 1"
WORD_COUNT                  = "Word Count"

bin_dir = os.path.split(__file__)[0]
package_dir = os.path.join(bin_dir, "..")
template_dir = os.path.join(bin_dir, "../templates")

INDEX_TEMPLATE = os.path.join(package_dir, "index.html.template")
ABOUT_PAGE_TEMPLATE = os.path.join(package_dir, "about.html.template")
BOOK_INDEX_TEMPLATE = os.path.join(package_dir, "book_index.html.template")
BOOK_DESC_TEMPLATE = os.path.join(package_dir, "book_desc.html.template")
BOOK_CATEGORY_TEMPLATE = os.path.join(package_dir, "book_category.html.template")
FOOTER_LOGOS_TEMPLATE = os.path.join(template_dir, "footer-logos.html.template")
SOCIAL_MEDIA_TEMPLATE = os.path.join(template_dir, "bookSocialMedia.html.template")
FOOTER_SOCIAL_MEDIA_TEMPLATE = os.path.join(template_dir, "footerSocialMedia.html.template")
DOWNLOAD_APP_BTNS_TEMPLATE = os.path.join(template_dir, "downloadAppBtns.html.template")
ERROR_PAGE_TEMPLATE = os.path.join(package_dir, "404.html.template")
PRIVACY_POLICY_TEMPLATE = os.path.join(package_dir, "privacypolicy.html.template")
APP_CACHE_HTML = os.path.join(package_dir, "appcache.html")
SIMPLYE_LOGO_TEMPLATE = os.path.join(template_dir, "se_logo.html.template")
MENU_OPEN_BTN_TEMPLATE = os.path.join(template_dir, "menuOpenBtn.html.template")
X_ICON_TEMPLATE = os.path.join(template_dir, "xIconBtn.html.template")
FILES_TO_COPY = ["simplyE_logo.png",
                 "simplye.png",
                 "apple_badge.png",
                 "google_badge.png",
                 "amazon_badge.png",
                 "webpub-viewer/dist/sw.js",
                 "webpub-viewer/dist/webpub-viewer.js",
                 "webpub-viewer/node_modules/requirejs/require.js",
                 "webpub-viewer/node_modules/whatwg-fetch/fetch.js",
                 "webpub-viewer/dist/styles/css/main.css",
                 "images/iphone_simplyE_about.png",
                 "assetBuild/index.min.css",
                 "assetBuild/main.min.js",
                ]

logo = open(SIMPLYE_LOGO_TEMPLATE).read()
menuOpenBtn = open(MENU_OPEN_BTN_TEMPLATE).read()
xIconBtn = open(X_ICON_TEMPLATE).read()
footerLogos = open(FOOTER_LOGOS_TEMPLATE).read()
socialMedia = open(SOCIAL_MEDIA_TEMPLATE).read()
footerSocialMedia = open(FOOTER_SOCIAL_MEDIA_TEMPLATE).read()
downloadAppBtns = open(DOWNLOAD_APP_BTNS_TEMPLATE).read()

callOutText = "<p>Download SimplyE for access to hundreds of thousands of library e-books.</p>"

# Compile SASS and minify both CSS and JS
css_js_build = subprocess.call("./node_modules/.bin/gulp", cwd=os.path.abspath(package_dir), shell=True)
if css_js_build != 0:
      raise Exception("Failed to build landing page javascript and css")

class GenerateLandingPageScript:

      def __init__(self, publisher_asset_file, csv_file, output_dir):
          self.publisher_asset_file = publisher_asset_file
          self.csv_file = csv_file
          self.output_dir = output_dir
          self.workspace_path = os.path.join(package_dir, "workspace")

      def run(self):
          self.clean_and_create_workspace()
          self.download_and_extract_publisher_assets()

          if not os.path.exists(self.output_dir):
              os.mkdir(self.output_dir)
              os.mkdir(self.output_dir + "/books")
              os.mkdir(self.output_dir + "/covers")
              os.mkdir(self.output_dir + "/book_desc")
              os.mkdir(self.output_dir + "/category")

          # Prepare javascript to copy into the book directories later.
          npm_result = subprocess.call("npm install", cwd=os.path.abspath(os.path.join(package_dir, "webpub-viewer")), shell=True)
          if npm_result != 0:
                raise Exception("Failed to build javascript")

          books_html_home = []
          all_books_description = {}
          mta_category_dict = {}

          with open(self.csv_file) as file:
              reader = csv.DictReader(file)

              for row in reader:
                  title = unicode(row.get(SPREADSHEET_TITLE_HEADER), 'utf-8')

                  adult = True
                  if row.get(OKAY_FOR_12_AND_UNDER) == "Y":
                      adult = False

                  author = unicode(row.get(SPREADSHEET_AUTHOR_HEADER), 'utf-8')

                  if row.get(COVER_URL_HEADER) and (row.get(COVER_URL_HEADER).replace(' ', '') != ''):
                    cover = row.get(COVER_URL_HEADER)
                  else:
                    cover = row.get(COVER_FILENAME_HEADER)

                  book_hash = base64.b64encode(author+title)
                  book_hash = re.sub('[^0-9a-zA-Z]+', '', book_hash)

                  local_path_to_cover = os.path.join(self.output_dir, 'covers', book_hash)
                  os.makedirs(local_path_to_cover)
                  if "http" in cover or "https" in cover:
                    remote_cover_content = urllib2.urlopen(cover).read()
                    local_path_to_cover  = os.path.join(local_path_to_cover, os.path.basename(cover))
                    with open(local_path_to_cover, 'w') as local_cover:
                      local_cover.write(remote_cover_content)
                  else:
                    # This cover was extracted in download_and_extract_publisher_assets()
                    workspace_path_to_cover = os.path.join(self.workspace_path, cover)
                    local_path_to_cover     = os.path.join(local_path_to_cover, cover)
                    shutil.copy(workspace_path_to_cover, local_path_to_cover)

                  cover_src = os.path.join('covers', book_hash, os.path.basename(local_path_to_cover))

                  if row.get(EPUB_URL_HEADER) and (row.get(EPUB_URL_HEADER).replace(' ', '') != ''):
                    download = row.get(EPUB_URL_HEADER)
                  else:
                    download = row.get(EPUB_FILENAME_HEADER)

                  temp_file = ""

                  description = row.get(DESCRIPTION_HEADER).encode('utf-8', 'ignore')
                  mta_category = row.get(MTA_CATEGORY_1)

                  book_word_count = row.get(WORD_COUNT)
                  # using avg 150 wpm
                  book_word_minutes = float(book_word_count) / 150
                  book_word_hours = book_word_minutes / 60

                  if book_word_hours <= 0.5:
                      total_reading_time = "1/2 hour read"
                  elif book_word_hours > 0.5 and book_word_hours <= 2:
                      total_reading_time = "1 hour read"
                  elif book_word_hours > 2 and book_word_hours <= 4:
                      total_reading_time = "2+ hour read"
                  elif book_word_hours > 4:
                      total_reading_time = "4+ hour read"

                  if "http" in download or "https" in download:
                      print "Downloading %s." % download
                      remote_epub = urllib2.urlopen(download)
                      content = remote_epub.read()
                      temp_file = os.path.abspath(os.path.join(package_dir, "temp.epub"))
                      with open(temp_file, "w") as local_epub:
                          local_epub.write(content)
                  else:
                      print "Looking for %s locally" % download
                      temp_file = os.path.join(self.workspace_path, download)

                  book_dir = os.path.join(self.output_dir, "books/" + book_hash)
                  export_result = subprocess.call('$GOPATH/bin/webpub-exporter -f %s -o "%s"' % (temp_file, book_dir), shell=True)
                  if export_result != 0:
                      print "Failed to export %s" % download
                      continue

                  # Shim in a page with a call to action
                  manifest_path = os.path.join(book_dir, 'manifest.json')
                  manifest_as_string = open(manifest_path).read()
                  manifest_as_obj = json.loads(manifest_as_string)

                  manifest_as_obj['spine'].append({'type': 'application/html', 'href': 'call-to-action.html'})

                  #  read call-to-action.html as a template and substitute in the Book's title as document title
                  call_to_action_string = open(os.path.join(package_dir, 'call-to-action.html')).read()
                  call_to_action_string = call_to_action_string.replace("{{title}}", title).replace("{{callOutText}}", callOutText).replace("{{downloadAppBtns}}", downloadAppBtns)

                  with codecs.open(os.path.join(book_dir, 'call-to-action.html'), 'w', 'utf-8') as book_specific_call_to_action_file:
                    book_specific_call_to_action_file.write(call_to_action_string)

                  with codecs.open(manifest_path, 'w', 'utf-8') as manifest_file:
                      manifest_file.write(json.dumps(manifest_as_obj))

                  os.remove(temp_file)

                  with open(BOOK_INDEX_TEMPLATE) as template_file:
                      template = template_file.read()
                      out = template.replace("{{title}}", title).replace("{{cover}}", cover)
                      out = out.replace("{{back_url}}", "../../book_desc/" + book_hash + ".html")
                      with codecs.open(os.path.join(book_dir, "index.html"), "w", "utf-8") as output_file:
                          output_file.write(out)

                  # For the individual book description pages
                  socialMediaHTML = socialMedia.replace("{{title}}", title).replace("{{url}}", "/book_desc/" + book_hash + ".html").replace("{{author}}", author)
                  book_desc_dir = os.path.join(self.output_dir, "book_desc/")
                  book_desc_html = """
                      <div class="book-details">
                        <img src="../%(cover_src)s"  alt="" />
                        <div class="info">
                          <h2 class="title">%(title)s</h2>
                          <div class="author">%(author)s</div>
                          <div class="read-time">%(total_reading_time)s</div>
                        </div>
                      </div>
                      <a href="../books/%(book_hash)s/index.html" title="%(title)s" class="read-now">
                        START READING
                      </a>
                      <div class="book_desc">
                        <div class="social-media-share">
                          %(socialMedia)s
                        </div>
                        <div class="description-text">
                          %(description)s
                        </div>
                        <a href="../category/%(mta_category)s.html" class="back-to-category">
                          More %(mta_category)s &gt;
                        </a>
                      </div>
                  """ % {
                      "title": title,
                      "author": author,
                      "cover_src": cover_src,
                      "book_hash": book_hash,
                      "description": description,
                      "mta_category": mta_category,
                      "socialMedia": socialMediaHTML,
                      "total_reading_time": total_reading_time
                  }

                  # Adding individual book titles and descriptions to dictionary to render later
                  all_books_description[title + " - " + author] = {
                      "title": title,
                      "author": author,
                      "book_desc_html": book_desc_html,
                      "cover": "../" + cover_src,
                      "book_hash": book_hash
                  }

                  with open(APP_CACHE_HTML) as appcache_file:
                        html = appcache_file.read()
                        with open(os.path.join(book_dir, "appcache.html"), "w") as output_file:
                              output_file.write(html)

                  with open(os.path.join(book_dir, "manifest.appcache")) as manifest_file:
                      manifest = manifest_file.read()

                  manifest_list = "index.html\n"
                  manifest_list += "call-to-action.html\n"

                  for file_to_copy in FILES_TO_COPY:
                      path = os.path.join(package_dir, file_to_copy)
                      shutil.copy(path, self.output_dir)
                      manifest_list += "../../" + file_to_copy.split("/")[-1] + "\n"

                  manifest = manifest.replace("index.html\n", manifest_list)
                  with open(os.path.join(book_dir, "manifest.appcache"), "w") as manifest_file:
                        manifest_file.write(manifest)

                  # This is the markup for a single book on the homepage
                  book_html_home = """
                    <li>
                      <a href="./book_desc/%(book_hash)s.html" title="%(title)s" class="%(class)s">
                        <span class="cover">
                          <img src="%(cover_src)s" alt="" />
                        </span>
                        <div class="info">
                          <div class="title">%(title)s</div>
                          <div class="author">%(author)s</div>
                        </div>
                      </a>
                    </li>
                  """ % {
                      "title": title,
                      "author": author,
                      "cover_src": cover_src,
                      "book_hash": book_hash,
                      "class": "adult"# if adult else ""
                  }

                  # This is the markup for a single book on a category page
                  book_html_category = """
                    <li>
                      <a tabindex="-1" href="../book_desc/%(book_hash)s.html" title="%(title)s">
                        <img src="../%(cover_src)s" alt="" />
                      </a>
                      <div class="info book_desc">
                        <h2 class="title">
                            <a tabindex="-1" href="../book_desc/%(book_hash)s.html" title="%(title)s">%(title)s</a>
                        </h2>
                        <div class="author">%(author)s</div>
                        <div class="read-time">%(total_reading_time)s</div>
                        <div class="book-links">
                          <a href="../books/%(book_hash)s/index.html" title="%(title)s"
                            aria-label="Read %(title)s">
                            READ
                          </a>
                          <a href="../book_desc/%(book_hash)s.html" title="%(title)s"
                            aria-label="Learn more about %(title)s">
                            LEARN MORE &gt;
                          </a>
                        </div>
                      </div>
                    </li>
                  """ % {
                      "title": title,
                      "author": author,
                      "cover_src": cover_src,
                      "book_hash": book_hash,
                      "class": "adult",
                      "total_reading_time": total_reading_time
                  }

                  # Organize the book by its category
                  if mta_category in mta_category_dict:
                      mta_category_dict[mta_category]["home"].append(book_html_home)
                      mta_category_dict[mta_category]["category"].append({"title": title.lower(), "html_fragment": book_html_category})
                  else:
                      mta_category_dict[mta_category] = {
                          "home": [book_html_home],
                          "category": [{"title": title.lower(), "html_fragment": book_html_category}]
                      }

          category_nav_home = []
          category_nav = []
          mta_category_page = {}

          # Generate the book lanes and insert a call to action for SimplyE on the homepage
          for category_key in mta_category_dict:
              # randomize books in lane, each build
              random.shuffle(mta_category_dict[category_key]["home"])
              shortenHomeLane = (mta_category_dict[category_key]["home"])[:10]

              books_html_home += """
                <li class="category-lane">
                  <div class="category-header">
                    <a href="./category/%(category_key)s.html">
                      <h2>%(category_key)s</h2>
                      <span>see all &gt;</span>
                    </a>
                  </div>
                  <div class="lane-container">
                    <ul class="books">
                      %(books)s
                    </ul>
                  </div>
                </li>
              """ % {
                  "category_key": category_key,
                  "books": "".join(shortenHomeLane)
              }

              # Generate the main navigation from all the category titles
              category_nav += """
                <li><a href="../category/%(category_key)s.html">%(category_key)s</a></li>
              """ % {
                  "category_key": category_key
              }

              # Generate the main navigation for the homepage - different base directory
              category_nav_home += """
                <li><a href="./category/%(category_key)s.html">%(category_key)s</a></li>
              """ % {
                  "category_key": category_key
              }

              # Generate the individual category page and the books in it
              mta_category_dict[category_key]["category"].sort(key = lambda attributes: attributes['title'])

              category_page = """
                <div class="category-title">
                  <h2>%(category_key)s</h2>
                </div>
                <ul>
                  %(books)s
                </ul>
              """ % {
                  "category_key": category_key,
                  "books": "".join(x["html_fragment"] for x in mta_category_dict[category_key]["category"])
              }

              mta_category_page[category_key] = category_page

          cacheManifest = "CACHE MANIFEST\n #timestamp "
          cacheManifest += str(datetime.datetime.utcnow())
          cacheManifest += "\n\n"

          category_nav += "<li><a href='../about.html'>About</a></li>"
          category_nav_home += "<li><a href='about.html'>About</a></li>"

          # Generate all individual category pages
          book_category_dir = os.path.join(self.output_dir, "category/")
          for category_key in mta_category_page:
              with open(BOOK_CATEGORY_TEMPLATE) as template_file:
                  template = template_file.read()
                  out = template.replace("{{category}}", category_key).replace("{{category_nav}}", "".join(category_nav))
                  out = out.replace("{{book_category}}", "".join(mta_category_page[category_key])).replace("{{logo}}", logo)
                  out = out.replace("{{menuOpenBtn}}", menuOpenBtn).replace("{{xIconBtn}}", xIconBtn).replace("{{footerLogos}}", footerLogos)
                  out = out.replace("{{footerSocialMedia}}", footerSocialMedia).replace("{{downloadAppBtns}}", downloadAppBtns)
                  out = out.replace("{{callOutText}}", callOutText)

                  with codecs.open(os.path.join(book_category_dir, category_key + ".html"), 'w', "utf-8") as output_file:
                      output_file.write(out)

          # Generate all individual book description pages
          for book in all_books_description:
              with open(BOOK_DESC_TEMPLATE) as template_file:
                  template = template_file.read()
                  out = template.replace("{{title}}", all_books_description[book]['title']).replace("{{cover}}", all_books_description[book]['cover'][2:])
                  out = out.replace("{{author}}", all_books_description[book]['author'])
                  out = out.replace("{{book_desc_html}}", all_books_description[book]['book_desc_html']).replace("{{category_nav}}", "".join(category_nav))
                  out = out.replace("{{logo}}", logo).replace("{{menuOpenBtn}}", menuOpenBtn).replace("{{xIconBtn}}", xIconBtn).replace("{{footerLogos}}", footerLogos)
                  out = out.replace("{{footerSocialMedia}}", footerSocialMedia).replace("{{downloadAppBtns}}", downloadAppBtns)
                  out = out.replace("{{callOutText}}", callOutText)

                  with codecs.open(os.path.join(book_desc_dir, all_books_description[book]["book_hash"] + ".html"), 'w', "utf-8") as output_file:
                      output_file.write(out)

          with open(INDEX_TEMPLATE) as template_file:
              template = template_file.read()
              out = template.replace("{{all_books}}", "".join(books_html_home)).replace("{{category_nav}}", "".join(category_nav_home))
              out = out.replace("{{logo}}", logo).replace("{{menuOpenBtn}}", menuOpenBtn).replace("{{xIconBtn}}", xIconBtn).replace("{{footerLogos}}", footerLogos)
              out = out.replace("{{footerSocialMedia}}", footerSocialMedia).replace("{{downloadAppBtns}}", downloadAppBtns)
              out = out.replace("{{callOutText}}", callOutText)

              with codecs.open(os.path.join(self.output_dir, "index.html"), 'w', "utf-8") as output_file:
                  output_file.write(out)

              cacheManifest += "index.html\n"

          with open(ABOUT_PAGE_TEMPLATE) as template_file:
              template = template_file.read()
              out = template.replace("{{category_nav}}", "".join(category_nav_home)).replace("{{logo}}", logo)
              out = out.replace("{{menuOpenBtn}}", menuOpenBtn).replace("{{xIconBtn}}", xIconBtn).replace("{{footerLogos}}", footerLogos)
              out = out.replace("{{footerSocialMedia}}", footerSocialMedia).replace("{{downloadAppBtns}}", downloadAppBtns)
              out = out.replace("{{callOutText}}", callOutText)

              with codecs.open(os.path.join(self.output_dir, "about.html"), 'w', "utf-8") as output_file:
                  output_file.write(out)

              cacheManifest += "about.html\n"

          with open(ERROR_PAGE_TEMPLATE) as template_file:
              template = template_file.read()
              out = template.replace("{{category_nav}}", "".join(category_nav_home)).replace("{{logo}}", logo)
              out = out.replace("{{menuOpenBtn}}", menuOpenBtn).replace("{{xIconBtn}}", xIconBtn).replace("{{footerLogos}}", footerLogos)
              out = out.replace("{{downloadAppBtns}}", downloadAppBtns).replace("{{callOutText}}", callOutText)

              with codecs.open(os.path.join(self.output_dir, "404.html"), 'w', "utf-8") as output_file:
                  output_file.write(out)

              cacheManifest += "404.html\n"

          with open(PRIVACY_POLICY_TEMPLATE) as template_file:
              template = template_file.read()
              out = template.replace("{{category_nav}}", "".join(category_nav_home)).replace("{{logo}}", logo)
              out = out.replace("{{menuOpenBtn}}", menuOpenBtn).replace("{{xIconBtn}}", xIconBtn).replace("{{footerLogos}}", footerLogos)
              out = out.replace("{{downloadAppBtns}}", downloadAppBtns).replace("{{callOutText}}", callOutText)

              with codecs.open(os.path.join(self.output_dir, "privacypolicy.html"), 'w', "utf-8") as output_file:
                  output_file.write(out)

              cacheManifest += "privacypolicy.html\n"

          for file_to_copy in FILES_TO_COPY:
              path = os.path.join(package_dir, file_to_copy)
              shutil.copy(path, self.output_dir)
              cacheManifest += file_to_copy.split("/")[-1] + "\n"

          cacheManifest += "\nNETWORK:\n*\n"

          with open(os.path.join(self.output_dir, "manifest.appcache"), "w") as output_file:
                output_file.write(cacheManifest)

          self.optimize_covers()

      def optimize_covers(self):
          print "...Optimizing book cover sizes"
          for cover_path in glob.glob(self.output_dir + "/covers/**/*"):
              image = Image.open(cover_path)
              image.thumbnail([195,20000])
              image.save(cover_path)

      def clean_and_create_workspace(self):
          if os.path.exists(self.workspace_path):
            shutil.rmtree(self.workspace_path)
          print "Creating a fresh workspace"
          os.mkdir(self.workspace_path)

      def download_and_extract_publisher_assets(self):
          print "Downloading ZIPs from %s" % self.publisher_asset_file
          with open(self.publisher_asset_file) as file:
              reader = csv.DictReader(file)
              for row in reader:
                  url = row["URL to ZIP containing EPUBs and covers"]
                  basename = os.path.basename(url)

                  print "downloading %s to workspace" % url
                  content = urllib2.urlopen(url).read()
                  zip_path = os.path.join(self.workspace_path, basename+".zip")

                  # write local zip
                  with open(zip_path, "w") as local_zip:
                     local_zip.write(content)

                  # defale zip into workspace
                  print "...extracting"
                  with zipfile.ZipFile(zip_path,"r") as zip_ref:
                     zip_ref.extractall(self.workspace_path)


if len(sys.argv) != 4:
   raise Exception("Usage: bin/generate_landing_page <publisher_asset_file_name> <book_spreadsheet> <output_directory>")

publisher_asset_file = sys.argv[1]
book_csv_file        = sys.argv[2]
output_dir           = sys.argv[3]


GenerateLandingPageScript(publisher_asset_file, book_csv_file, output_dir).run()
