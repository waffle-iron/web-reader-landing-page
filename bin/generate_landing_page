#!/usr/bin/env python
"""Generate HTML for the landing page based on a spreadsheet of book titles and age classifications."""

import os
import sys
import codecs
import csv
import datetime
import shutil
import subprocess
import urllib2

# Header Title Mappings
SPREADSHEET_TITLE_HEADER    = "Title"
SPREADSHEET_AUTHOR_HEADER   = "Author"
OKAY_FOR_12_AND_UNDER       = "OK for 12yo?"
DESCRIPTION_HEADER          = "Description"
COVER_URL_HEADER            = "Cover URL"
EPUB_URL_HEADER             = "EPUB URL"

bin_dir = os.path.split(__file__)[0]
package_dir = os.path.join(bin_dir, "..")

INDEX_TEMPLATE = os.path.join(package_dir, "index.html.template")
BOOK_INDEX_TEMPLATE = os.path.join(package_dir, "book_index.html.template")
BOOK_DESC_TEMPLATE = os.path.join(package_dir, "book_desc.html.template")
APP_CACHE_HTML = os.path.join(package_dir, "appcache.html")
FILES_TO_COPY = ["index.css",
                 "simplyE_logo.png",
                 "simplye.png",
                 "apple_badge.png",
                 "google_badge.png",
                 "amazon_badge.png",
                 "webpub-viewer/dist/sw.js",
                 "webpub-viewer/dist/webpub-viewer.js",
                 "webpub-viewer/node_modules/requirejs/require.js",
                 "webpub-viewer/node_modules/whatwg-fetch/fetch.js",
                 "webpub-viewer/dist/styles/css/main.css",
                ]

class GenerateLandingPageScript:

      def __init__(self, csv_file, output_file):
          self.csv_file = csv_file
          self.output_dir = output_dir

      def run(self):
          if not os.path.exists(self.output_dir):
              os.mkdir(self.output_dir)
              os.mkdir(self.output_dir + "/books")
              os.mkdir(self.output_dir + "/book_desc")

          # Prepare javascript to copy into the book directories later.
          npm_result = subprocess.call("npm install", cwd=os.path.abspath(os.path.join(package_dir, "webpub-viewer")), shell=True)
          if npm_result != 0:
                raise Exception("Failed to build javascript")

          books_html = []

          with open(csv_file) as file:
              reader = csv.DictReader(file)

              for row in reader:
                  title = unicode(row.get(SPREADSHEET_TITLE_HEADER), 'utf-8')

                  adult = True
                  if row.get(OKAY_FOR_12_AND_UNDER) == "Y":
                      adult = False

                  author = unicode(row.get(SPREADSHEET_AUTHOR_HEADER), 'utf-8')
                  cover = row.get(COVER_URL_HEADER)
                  download = row.get(EPUB_URL_HEADER)
                  description = row.get(DESCRIPTION_HEADER)

                  folder_name = (title + " - " + author).encode('ascii', 'ignore')
                  print "Downloading %s." % download
                  remote_epub = urllib2.urlopen(download)
                  content = remote_epub.read()
                  temp_file = os.path.abspath(os.path.join(package_dir, "temp.epub"))
                  with open(temp_file, "w") as local_epub:
                      local_epub.write(content)

                  book_dir = os.path.join(self.output_dir, "books/" + folder_name)
                  export_result = subprocess.call('$GOPATH/bin/webpub-exporter -f %s -o "%s"' % (temp_file, book_dir), shell=True)
                  if export_result != 0:
                      print "Failed to export %s" % download
                      continue

                  os.remove(temp_file)

                  with open(BOOK_INDEX_TEMPLATE) as template_file:
                      template = template_file.read()
                      out = template.replace("{{title}}", title).replace("{{cover}}", cover)
                      with codecs.open(os.path.join(book_dir, "index.html"), "w", "utf-8") as output_file:
                          output_file.write(out)

                  book_desc_dir = os.path.join(self.output_dir, "book_desc/")
                  book_desc_html = """
                  <div class="book-details">
                      <img src="%(cover)s" alt="%(title)s" />
                      <div class="info">
                        <h2 class="title">%(title)s</h2>
                        <div class="author">%(author)s</div>
                      </div>
                  </div>
                  <a href="../books/%(folder_name)s/index.html" title="%(title)s" class="read-now">
                    START READING
                  </a>
                  <div class="book_desc">
                      <div class="social-media-share"></div>
                      <div class="read-time">347 pages | 4 hour read</div>
                      %(description)s
                  </div>
                  """ % {
                      "title": title,
                      "author": author,
                      "cover": cover,
                      "folder_name": folder_name,
                      "class": "adult" if adult else "",
                      "description": description.decode('utf-8')
                  }

                  with open(BOOK_DESC_TEMPLATE) as template_file:
                      template = template_file.read()
                      out = template.replace("{{title}}", title).replace("{{book_desc_html}}", book_desc_html)

                      with codecs.open(os.path.join(book_desc_dir, title + ".html"), 'w', "utf-8") as output_file:
                          output_file.write(out)

                  with open(APP_CACHE_HTML) as appcache_file:
                        html = appcache_file.read()
                        with open(os.path.join(book_dir, "appcache.html"), "w") as output_file:
                              output_file.write(html)

                  with open(os.path.join(book_dir, "manifest.appcache")) as manifest_file:
                      manifest = manifest_file.read()

                  manifest_list = "index.html\n"
                  for file_to_copy in FILES_TO_COPY:
                      path = os.path.join(package_dir, file_to_copy)
                      shutil.copy(path, self.output_dir)
                      manifest_list += "../../" + file_to_copy.split("/")[-1] + "\n"

                  manifest = manifest.replace("index.html\n", manifest_list)
                  with open(os.path.join(book_dir, "manifest.appcache"), "w") as manifest_file:
                        manifest_file.write(manifest)

                  book_html = """
                  <a href="book_desc/%(title)s.html" title="%(title)s" class="%(class)s">
                    <img src="%(cover)s" alt="%(title)s" />
                    <div class="info">
                      <div class="title">%(title)s</div>
                      <div class="author">%(author)s</div>
                    </div>
                  </a>
                  """ % {
                      "title": title,
                      "author": author,
                      "cover": cover,
                      "folder_name": folder_name,
                      "class": "adult" if adult else ""
                  }

                  books_html += book_html

          cacheManifest = "CACHE MANIFEST\n #timestamp "
          cacheManifest += str(datetime.datetime.utcnow())
          cacheManifest += "\n\n"

          with open(INDEX_TEMPLATE) as template_file:
              template = template_file.read()
              out = template.replace("{{all_books}}", "".join(books_html))

              with codecs.open(os.path.join(self.output_dir, "index.html"), 'w', "utf-8") as output_file:
                  output_file.write(out)

              cacheManifest += "index.html\n"

          for file_to_copy in FILES_TO_COPY:
              path = os.path.join(package_dir, file_to_copy)
              shutil.copy(path, self.output_dir)
              cacheManifest += file_to_copy.split("/")[-1] + "\n"

          cacheManifest += "\nNETWORK:\n*\n"

          with open(os.path.join(self.output_dir, "manifest.appcache"), "w") as output_file:
                output_file.write(cacheManifest)

if len(sys.argv) < 3:
   raise Exception("Usage: bin/generate_landing_page <csv_file> <output_dir>")

csv_file = sys.argv[1]
output_dir = sys.argv[2]
GenerateLandingPageScript(csv_file, output_dir).run()
